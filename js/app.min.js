
let forDataCalculator = {};

function processingRouteFields(selectCell) {
    let cell = document.querySelector(selectCell);
    let innerRegion = cell.querySelector('.form__inner_region'),
        inputRegion = innerRegion.querySelector('.form__input'),
        blockHintsRegion = innerRegion.querySelector('.form__hints');
    let innerLocality = cell.querySelector('.form__inner_locality'),
        inputLocality = innerLocality.querySelector('.form__input'),
        blockHintsLocality = innerLocality.querySelector('.form__hints');

    let valueRegion = {};
    let valueLocality = {};

    outputHints(inputRegion, blockHintsRegion, "region", 10);
    outputHints(inputLocality, blockHintsLocality, "city", 15);
    /* 
        Функция вывода подсказок при вводе текста.
        Принимает в параметрах:
            - поле ввода текста
            - блок для вывода подсказок
            - что ищем (регион или населнный пункт)
    */
    function outputHints(input, blockHints, searchContent, answerLimit) {
        /*
            Функция открывающая поле региона при клике на ссылку "Указать регион" и скрывающая ссылку.
        */
        (function () {
            let link = innerRegion.querySelector('.form__link');
            link.addEventListener('click', (e) => {
                inputRegion.classList.remove('display_off');
                link.classList.add('display_off');
                inputRegion.focus();
            });
        }());

        /*
            Функция отслеживает фокус на поле ввода.
            Если фокус исчезает, подсказки скрываются.
            Если фокус устанавливается, подсказки появляются.
        */
        (function () {
            input.addEventListener('focus', (e) => {
                blockHints.classList.remove('display_off');
            });
            input.addEventListener('blur', (e) => {
                blockHints.classList.add('display_off');
            });
            input.parentElement.tabIndex = 0;
            input.parentElement.addEventListener('focus', (e) => {
                input.focus(); 
            });
        }());

        /*
            Функция для удаления подсказок.
            В качестве параметра принимает блок с подсказками.
        */
        function  cleanHints(select) {
            let hints = select.querySelectorAll('.form__hints-element');
            if (hints.length > 0) {
                for (let i = 0; i < hints.length; i++) {
                    hints[i].remove();
                }
            }
        }  
        function createHints(select, res) {
            
        }

        /*
            Отслеживаем событие ввода текста и обрабатываем его.
            1. Удаляем все старые подсказки
            2. Если введено 3 и более символов, формируем запрос на сервер и отправляем его.
            3. При получении ответа, создаем новые подсказки и выводим их.
        */
        input.addEventListener('input', function(e) {
            if (input.value.length > 2) {
                // Собираем объект с данными для запроса и из собранных данных формируем строку с get параметрами запроса.
                let objectQuery = {};
                objectQuery = {
                    query: input.value,
                    contentType: searchContent,
                    withParent: 1,
                    limit: answerLimit
                };
                if (searchContent == "city" && valueRegion.id != null) {
                    objectQuery.regionId = +valueRegion.id;
                }
                let getParams = '';
                for (let key in objectQuery) {
                    if (getParams === '') {
                        getParams = `${key}=${objectQuery[key]}`;
                    } else {
                        getParams += `&${key}=${objectQuery[key]}`;
                    }
                }

                let requestHints = new AjaxWrapper({
                    method: "get",
                    url: "http://logist-master/api/hints?" + getParams,
                    func: function () {
                        if (this.readyState == 4 && this.status == 200) {
                            cleanHints(blockHints);
                            let res = JSON.parse(this.response)['result'];
                            for (let i = 1; i < res.length; i++) {
                                let hintElement = document.createElement('div');
                                hintElement.classList.add('form__hints-element');
                
                                if (searchContent == "region") {
                                    let hintRegion = document.createElement('div');
                                    hintRegion.classList.add('form__hints-region');
                                    hintRegion.innerText = res[i]['name'] + " " + res[i]['type'].toLowerCase();
                                    hintElement.append(hintRegion);
                                } else if (searchContent == "city") {
                                    let hintCity = document.createElement('div');
                                    hintCity.classList.add('form__hints-city');
                                    hintCity.innerText = res[i]['typeShort'] + ". " + res[i]['name'] + " (" + res[i]['zip'] + ")";
                                    hintElement.append(hintCity);
                                    let hintRegion = document.createElement('div');
                                    hintRegion.classList.add('form__hints-region');
                                    hintRegion.innerText = res[i]['parents'][0]['name'] + " " + res[i]['parents'][0]['typeShort'].toLowerCase();
                                    if (res[i]['parents'].length > 1) {
                                        hintRegion.innerText += ", " + res[i]['parents'][1]['name'] + " " + res[i]['parents'][1]['typeShort'].toLowerCase() + '.';
                                    }
                                    hintElement.append(hintRegion);
                                }  
                                blockHints.append(hintElement);
                            }
                            /*
                                На каждый элемент подсказок вешаем событие клика.
                            */
                            let childrens = blockHints.children;
                            for (let i = 0; i < childrens.length; i++) {
                                childrens[i].addEventListener('click', function (e) {
                                    if (searchContent == "region") {
                                        input.value = res[i + 1]['name'] + " " + res[i + 1]['type'].toLowerCase();
                                        valueRegion = res[i + 1];
                                        inputLocality.value = '';
                                        cleanHints(blockHints);
                                        if (selectCell == ('.form__cell_from')) {
                                            forDataCalculator.fromRegion = valueRegion;
                                        } else if (selectCell== ('.form__cell_where')) {
                                            forDataCalculator.whereRegion = valueRegion;
                                        }
                                    } else if (searchContent == "city") {
                                        input.value = res[i + 1]['typeShort'].toLowerCase() + ". " + res[i + 1]['name'];
                                        valueLocality = res[i + 1];
                                        cleanHints(blockHints);
                                        if (selectCell == ('.form__cell_from')) {
                                            forDataCalculator.fromLocality = valueLocality;
                                        } else if (selectCell== ('.form__cell_where')) {
                                            forDataCalculator.whereLocality = valueLocality;
                                        }
                                    }
                                    console.log(forDataCalculator);
                                })
                            }
                        }
                    }
                })
            } else {
                cleanHints(blockHints);
            }
        });
    }
}
processingRouteFields('.form__cell_from');
processingRouteFields('.form__cell_where');


/*
    Функция добавления данных в объект 
*/
function addData(selectBlock, selectFormData) {
    let inputs = selectBlock.querySelectorAll('input');
    for (j = 0; j < inputs.length; j++) {
        inputs[j].addEventListener('change', (e) => {
            selectFormData[e.target.name] = e.target.value;
            console.log(selectFormData);
        })
    }
}
let formBlocks = document.querySelectorAll('.form__block');
for (i = 1; i < formBlocks.length; i++) {
    addData(formBlocks[i], forDataCalculator);
}


// ajaxWrapper
objectParamsAjax = {
    method: "",
    url: "",
    func: function () {
        console.log("функция запущенна");
    },
    sunc: true,
    heaaders: {

    },
    answerType: "", 
    timeout: ""
}
class AjaxWrapper {
    constructor (objectParams) {
        /*
            Если в переданом объекте:
                1. существует свойство с ключом method И это свойство имеет одно из значений get|post|json
                    И
                2. существует свойство с ключом url И это свойство не пустая строка
                    ТОГДА
            Если в переданом объекте проверяем свойство с ключои sunc, если его не существует, создаём его со значением true.
                ДАЛЕЕ
            Создаём объект соединения и открываем соединение с параметрами method, url, sunc получеными из одноименых свойствах из переданого объекта.
        */
        if (
            ("method" in objectParams && 
            objectParams.method == ("get" || "post" || "json")) &&
            ("url" in objectParams)
        ) { 
            if (!("sunc" in objectParams)) {
                objectParams.sunc = true;
            }
            this.ajax = new XMLHttpRequest();
            this.ajax.open(objectParams.method, objectParams.url, objectParams.sunc);
            if (objectParams.method == "json") {
                this.ajax.setRequestHeader('Content-Type', 'application/json');
            }
        }

        if (
            "headers" in objectParams &&
            objectParams.heaaders !== {}) {
                for (header in objectParams.headers) {
                    this.ajax.setRequestHeader(header, objectParams.headers[header]);
                }
        }
        
        if (
            "answerType" in objectParams &&
            objectParams.answerType == "json"
        ) {
            this.ajax.responseType = 'json';
        };

        if (
            "timeout" in objectParams &&
            objectParams.timeout !== 0
        ) {
            this.ajax.timeout = objectParams.timeout;
        }

        if (
            !("func" in objectParams) ||
            objectParams.func === ""
        ) {
            this.ajax.onreadystatechange = function () {
                if (this.readyState == 0) { // Исходное состояние
                    console.log('Исходное состояние');
                } else if (this.readyState == 1) { // вызван метод open
                    console.log('вызван метод open');
                } else if (this.readyState == 2) { // получены заголовки ответа
                    console.log('получены заголовки ответа');
                } else if (this.readyState == 3) { // ответ в процессе передачи (данные частично получены)
                    console.log("ответ в процессе передачи (данные частично получены)");
                } else if (this.readyState == 4) { // запрос завершён
                    if (this.status == 200) {
                        return this.response;
                    } else {
                        return [this.status, this.statusText];
                    }
                }
            };
        } else if (
            ("func" in objectParams) &&
            objectParams.func !== ""
        ) {
            this.ajax.onreadystatechange = objectParams.func;
        }

        this.ajax.send();
    }

    abort() {
        this.ajax.abort();
    }

    /*
        loadstart – начало запроса.
        progress – прибыла часть данных ответа, тело ответа полностью на данный момент можно получить из свойства responseText.
        abort – запрос был прерван вызовом xhr.abort().
        error – произошла ошибка соединения, например неправильное доменное имя. Событие не генерируется для HTTP-ошибок как, например, 404.
        load – запрос успешно завершён.
        timeout – запрос был отменён по причине истечения отведённого для него времени (происходит, только если был установлен таймаут).
        loadend – срабатывает после load, error, timeout или abort.
    */

    // upload() {
    //     this.ajax.upload.onloadstart = function() { // начало загрузки данных

    //     };
    //     this.ajax.upload.onprogress = function(event) { // генерируется периодически во время отправки на сервер.
    //         console.log(`Отправлено ${event.loaded} из ${event.total} байт`);
    //     };
    //     this.ajax.upload.onabort = function() { // загрузка прервана.
    //         console.log(`Загрузка принудительно завершена`);
    //     };
    //     this.ajax.upload.onerror = function() { // ошибка, не связанная с HTTP.
    //         console.log(`Произошла ошибка во время отправки: ${this.ajax.status}`);
    //     };
    //     this.ajax.upload.onload = function() { // загрузка успешно завершена.
    //         console.log(`Данные успешно отправлены.`);
    //     };
    //     this.ajax.upload.ontimeout = function() { // вышло время, отведённое на загрузку (при установленном свойстве timeout).
    //     };
    //     this.ajax.upload.onloadend = function() { // загрузка завершена, вне зависимости от того, как – успешно или нет.
    //     };
    // }
}


// let url = 'http://logist-master/api/hints?' + getParams;

// function ajaxResponseProcessing () {
//     if (this.readyState == 0) { // Исходное состояние
//         console.log('Исходное состояние');
//     } else if (this.readyState == 1) { // вызван метод open
//         console.log('вызван метод open');
//     } else if (this.readyState == 2) { // получены заголовки ответа
//         console.log('получены заголовки ответа');
//     } else if (this.readyState == 3) { // ответ в процессе передачи (данные частично получены)
//         console.log("ответ в процессе передачи (данные частично получены)");
//     } else if (this.readyState == 4) { // запрос завершён
//         if (this.status == 200) {
//             return this.response;
//         } else {
//             return [this.status, this.statusText];
//         }
//     }
// }



