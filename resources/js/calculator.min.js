/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/calculator.js":
/*!******************************!*\
  !*** ./src/js/calculator.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_calculator_processing_route_fields_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/calculator/processing_route_fields.js */ \"./src/js/modules/calculator/processing_route_fields.js\");\n/* harmony import */ var _helpers_collector_data_form_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/collector_data_form.js */ \"./src/js/helpers/collector_data_form.js\");\n/* harmony import */ var _helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/create_element.js */ \"./src/js/helpers/create_element.js\");\n/* harmony import */ var _helpers_ajax_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/ajax.js */ \"./src/js/helpers/ajax.js\");\n\n\n\n\n\n\n// объект для сбора данных с формы\nlet obj_data_form = {};\n// оработка полей маршрута, вывод подсказок, обработка кликов на подсказках\n(0,_modules_calculator_processing_route_fields_js__WEBPACK_IMPORTED_MODULE_0__.processing_route_fields)('.form__cell_from', obj_data_form);\n(0,_modules_calculator_processing_route_fields_js__WEBPACK_IMPORTED_MODULE_0__.processing_route_fields)('.form__cell_where', obj_data_form);\n// обработка остальных полей формы, сбор данных в объект\nlet form__blocks = document.querySelectorAll('.form__block');\n(0,_helpers_collector_data_form_js__WEBPACK_IMPORTED_MODULE_1__.collector_data_form)(form__blocks[1], obj_data_form);\n(0,_helpers_collector_data_form_js__WEBPACK_IMPORTED_MODULE_1__.collector_data_form)(form__blocks[2], obj_data_form);\n(0,_helpers_collector_data_form_js__WEBPACK_IMPORTED_MODULE_1__.collector_data_form)(form__blocks[3], obj_data_form);\n\n\n\n// расчёт доставки при клике на кнопку \"Расчитать\"\nlet monitor = document.querySelector('.calculator__screen');\n\nlet buttonCalc = document.querySelector('.form__submit');\nbuttonCalc.addEventListener('click', (e) => {\n    e.preventDefault();\n    monitor.innerText = '';\n    calculate_delivery('pec');\n    calculate_delivery('kit');\n})\n\n/**\n * расчитывает доставку в указанной ТК\n * \n * добавляет в объект obj_data_form элемент с ключом \"company\" со значением указаным в параметре\n * по этому элементу на строне сервера будет происходить выбор нужных таблиц и классов для расчета \n * @param {string} company транспортная компания\n */\nfunction calculate_delivery (company) {\n    obj_data_form['company'] = company;\n    let ajax = new _helpers_ajax_js__WEBPACK_IMPORTED_MODULE_3__.Ajax({\n        method: 'post',\n        url: 'http://logist-master/api/calculate-delivery',\n        json: obj_data_form\n    });\n    ajax.onload = () => {\n        console.log(ajax.response);\n        console.log(JSON.parse(ajax.response));\n        show_сalculate(JSON.parse(ajax.response));\n    };\n};\n\n/**\n * выводит данные расчета на экран\n * @param {object} data данные которые нужно вывести\n */\nfunction show_сalculate (data) {\n    let company = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('div', ['company'], monitor, 'append'),\n        img = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('img', ['company__img'], company, 'append'),\n        cost = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('div', ['company__cost'], company, 'append'),\n        time = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('div', ['company__time'], company, 'append'),\n        link = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('a', ['company__link'], company, 'append'),\n        button = (0,_helpers_create_element_js__WEBPACK_IMPORTED_MODULE_2__.create_element)('div', ['button', 'company__button'], link, 'append');\n    console.log(link);\n    button.innerText = 'Перейти на сайт компании';\n    link.setAttribute('href' , data['website']);\n    link.setAttribute('target' , '_blank');\n        \n\n    if (!data['errors']) {\n        img.setAttribute('src', `/resources/images/${data['company']}.jpg`);\n        cost.innerText = `${data['auto']['cost']}₽`;\n        if (typeof(data['auto']['time']) == 'object') {\n            if (data['auto']['time'][0] != data['auto']['time'][1]) {\n                time.innerText = `${data['auto']['time'][0]}-${data['auto']['time'][1]} д.`;\n            } else {\n                time.innerText = `${data['auto']['time'][0]} д.`;\n            }\n        } else {\n            time.innerText = `${data['auto']['time']} д.`;\n        }\n    }\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/calculator.js?");

/***/ }),

/***/ "./src/js/helpers/ajax.js":
/*!********************************!*\
  !*** ./src/js/helpers/ajax.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ajax\": () => (/* binding */ Ajax)\n/* harmony export */ });\n// пример объекта с параметрами запроса\r\n// let params = {\r\n//     method: 'post',\r\n//     url: 'http://logist-master/api/calculate-delivery',\r\n//     // data: {\r\n//     //     \"company\": \"pec\",\r\n//     //     \"auto\": {\r\n//     //         \"cost\": 4190,\r\n//     //         \"time\": [\r\n//     //             \"1\",\r\n//     //             \"2\"\r\n//     //         ]\r\n//     //     }\r\n//     // },\r\n//     json: '{\"company\":\"kit\",\"auto\":{\"cost\":3404,\"time\":1}}',\r\n// }\r\n\r\nclass Ajax {\r\n    constructor(params) {\r\n        this.method = params['method'];\r\n        this.url = new URL(params['url']);\r\n        this.data = params['data'];\r\n        this.json = params['json'];\r\n        this.ajax = new XMLHttpRequest();\r\n\r\n        /**\r\n         * перебирает объект с данными и вставляем их в url как get параметры\r\n         * @param {object} data ссылка на объект данных\r\n         * @param {object} url ссылка на объект URL\r\n         */\r\n        function prepare_data(data, url) {\r\n            for (let key in data) {\r\n                if (typeof(data[key]) == 'object') {\r\n                    prepare_data(data[key], url);\r\n                } else {\r\n                    url.searchParams.set(key, data[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.method == 'get') {\r\n            if (this.data) {\r\n                prepare_data(this.data, this.url);\r\n            }\r\n            this.ajax.open(this.method, this.url);\r\n            this.ajax.send();\r\n        }\r\n\r\n        if (this.method == 'post') {\r\n            this.ajax.open(this.method, this.url);\r\n            if (this.json) {\r\n                this.ajax.setRequestHeader('Content-type', 'application/json; charset=utf-8');\r\n                if (typeof(this.json) != 'string') {\r\n                    this.json = JSON.stringify(this.json);\r\n                }\r\n                this.ajax.send(this.json);\r\n            } else {\r\n                if (this.data) {\r\n                    this.ajax.send(this.data);\r\n                }\r\n            }\r\n        } \r\n\r\n        return this.ajax;\r\n    };   \r\n}\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        \n\n//# sourceURL=webpack://gulp-2022/./src/js/helpers/ajax.js?");

/***/ }),

/***/ "./src/js/helpers/collector_data_form.js":
/*!***********************************************!*\
  !*** ./src/js/helpers/collector_data_form.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"collector_data_form\": () => (/* binding */ collector_data_form)\n/* harmony export */ });\n/**\r\n * собирает данные из формы в указанный объект\r\n * \r\n * найдет в форме все input и повешает на них событие change\r\n * при срабатывание события в указанный объект будет добавляться или изменяться свойство объекта\r\n * формат свойства объекта: имя_поля = знач_поля\r\n * @param {string} select_form селектор формы\r\n * @param {object} seleect_obj ссылка на объект для хранения данных\r\n */\r\nfunction collector_data_form(select_form, seleect_obj) {\r\n    let form;\r\n    if (typeof(select_form) == 'string') {\r\n        form = document.querySelector(select_form);\r\n    } else {\r\n        form = select_form;\r\n    }\r\n    \r\n    let    inputs = form.querySelectorAll('input');\r\n    for (let j = 0; j < inputs.length; j++) {\r\n        inputs[j].addEventListener('change', (e) => {\r\n            seleect_obj[e.target.name] = e.target.value;\r\n            console.log(seleect_obj);\r\n        })\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/helpers/collector_data_form.js?");

/***/ }),

/***/ "./src/js/helpers/create_element.js":
/*!******************************************!*\
  !*** ./src/js/helpers/create_element.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"create_element\": () => (/* binding */ create_element)\n/* harmony export */ });\n/**\r\n * функция создает новый элемент и добавляет к нему классы\r\n * @param {string} tag тэг создаваемого элемента\r\n * @param {string|object} addedClass классы добавляемые к создаваемому элементу\r\n * @param {object} placeToAdd переменная хранящая объект в который вставляем новый эленмент\r\n * @param {string} selectWhere метод вставки\r\n * @returns {object} возвращает ссылку на созданный обект\r\n */\r\nfunction create_element(tag, addedClass, placeToAdd = null, selectWhere = null) {\r\n    let element = document.createElement(tag);\r\n    if (typeof(addedClass) == \"string\") {\r\n        element.classList.add(addedClass);\r\n    } else if (typeof(addedClass) == \"object\") {\r\n        for (let i = 0; i < addedClass.length; i++) {\r\n            let cl = addedClass[i];\r\n            element.classList.add(cl);\r\n        }\r\n    }\r\n    if (placeToAdd) {\r\n        if (selectWhere == 'prepend') {\r\n            placeToAdd.prepend(element);\r\n        } else if (selectWhere == 'before') {\r\n            placeToAdd.before(element);\r\n        } else if (selectWhere == 'after') {\r\n            placeToAdd.after(element);\r\n        } else if (selectWhere == 'append') {\r\n            placeToAdd.append(element);\r\n        } else {\r\n            placeToAdd.append(element);\r\n        }\r\n    }\r\n    return element;\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/helpers/create_element.js?");

/***/ }),

/***/ "./src/js/modules/calculator/processing_route_fields.js":
/*!**************************************************************!*\
  !*** ./src/js/modules/calculator/processing_route_fields.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processing_route_fields\": () => (/* binding */ processing_route_fields)\n/* harmony export */ });\n\r\n\r\nfunction processing_route_fields(select_cell, seleect_obj) {\r\n    let cell = document.querySelector(select_cell);\r\n    let innerRegion = cell.querySelector('.form__inner_region'),\r\n        inputRegion = innerRegion.querySelector('.form__input'),\r\n        blockHintsRegion = innerRegion.querySelector('.form__hints');\r\n    let innerLocality = cell.querySelector('.form__inner_locality'),\r\n        inputLocality = innerLocality.querySelector('.form__input'),\r\n        blockHintsLocality = innerLocality.querySelector('.form__hints');\r\n\r\n    let valueRegion = {};\r\n    let valueLocality = {};\r\n\r\n    outputHints(inputRegion, blockHintsRegion, \"region\", 10);\r\n    outputHints(inputLocality, blockHintsLocality, \"city\", 15);\r\n    /* \r\n        Функция вывода подсказок при вводе текста.\r\n        Принимает в параметрах:\r\n            - поле ввода текста\r\n            - блок для вывода подсказок\r\n            - что ищем (регион или населнный пункт)\r\n    */\r\n    function outputHints(input, blockHints, searchContent, answerLimit) {\r\n        /*\r\n            Функция открывающая поле региона при клике на ссылку \"Указать регион\" и скрывающая ссылку.\r\n        */\r\n        (function () {\r\n            let link = innerRegion.querySelector('.form__link');\r\n            link.addEventListener('click', (e) => {\r\n                inputRegion.classList.remove('display_off');\r\n                link.classList.add('display_off');\r\n                inputRegion.focus();\r\n            });\r\n        }());\r\n\r\n        /*\r\n            Функция отслеживает фокус на поле ввода.\r\n            Если фокус исчезает, подсказки скрываются.\r\n            Если фокус устанавливается, подсказки появляются.\r\n        */\r\n        (function () {\r\n            input.addEventListener('focus', (e) => {\r\n                blockHints.classList.remove('display_off');\r\n            });\r\n            input.addEventListener('blur', (e) => {\r\n                blockHints.classList.add('display_off');\r\n            });\r\n            input.parentElement.tabIndex = 0;\r\n            input.parentElement.addEventListener('focus', (e) => {\r\n                input.focus(); \r\n            });\r\n        }());\r\n\r\n        /*\r\n            Функция для удаления подсказок.\r\n            В качестве параметра принимает блок с подсказками.\r\n        */\r\n        function  cleanHints(select) {\r\n            let hints = select.querySelectorAll('.form__hints-element');\r\n            if (hints.length > 0) {\r\n                for (let i = 0; i < hints.length; i++) {\r\n                    hints[i].remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n            Отслеживаем событие ввода текста и обрабатываем его.\r\n            1. Удаляем все старые подсказки\r\n            2. Если введено 3 и более символов, формируем запрос на сервер и отправляем его.\r\n            3. При получении ответа, создаем новые подсказки и выводим их.\r\n        */\r\n        input.addEventListener('input', function(e) {\r\n            if (input.value.length > 2) {\r\n                // Собираем объект с параметрами для запроса и из собранных параметров формируем строку с get параметрами запроса.\r\n                let objectQuery = {};\r\n                objectQuery = {\r\n                    query: input.value,\r\n                    contentType: searchContent,\r\n                    withParent: 1,\r\n                    limit: answerLimit\r\n                };\r\n                if (searchContent == \"city\" && valueRegion.id != null) {\r\n                    objectQuery.regionId = +valueRegion.id;\r\n                }\r\n                let getParams = '';\r\n                for (let key in objectQuery) {\r\n                    if (getParams === '') {\r\n                        getParams = `${key}=${objectQuery[key]}`;\r\n                    } else {\r\n                        getParams += `&${key}=${objectQuery[key]}`;\r\n                    }\r\n                }\r\n\r\n                let url = `http://logist-master/api/hints`;\r\n                let ajax = new XMLHttpRequest();\r\n                ajax.open(\"post\", url);\r\n                ajax.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                ajax.onload = function () {\r\n                    if (this.readyState == 4 && this.status == 200) {\r\n                        // console.log(this.response);\r\n                        cleanHints(blockHints);\r\n                        let res = JSON.parse(this.response)['result'];\r\n                        for (let i = 1; i < res.length; i++) {\r\n                            let hintElement = document.createElement('div');\r\n                            hintElement.classList.add('form__hints-element');\r\n                            if (searchContent == \"region\") {\r\n                                let hintRegion = document.createElement('div');\r\n                                hintRegion.classList.add('form__hints-region');\r\n                                hintRegion.innerText = res[i]['name'] + \" \" + res[i]['type'].toLowerCase();\r\n                                hintElement.append(hintRegion);\r\n                            } else if (searchContent == \"city\") {\r\n                                let hintCity = document.createElement('div');\r\n                                hintCity.classList.add('form__hints-city');\r\n                                hintCity.innerText = res[i]['typeShort'] + \". \" + res[i]['name'] + \" (\" + res[i]['zip'] + \")\";\r\n                                hintElement.append(hintCity);\r\n                                let hintRegion = document.createElement('div');\r\n                                hintRegion.classList.add('form__hints-region');\r\n                                hintRegion.innerText = res[i]['parents'][0]['name'] + \" \" + res[i]['parents'][0]['typeShort'].toLowerCase();\r\n                                if (res[i]['parents'].length > 1) {\r\n                                    hintRegion.innerText += \", \" + res[i]['parents'][1]['name'] + \" \" + res[i]['parents'][1]['typeShort'].toLowerCase() + '.';\r\n                                }\r\n                                hintElement.append(hintRegion);\r\n                            }  \r\n                            blockHints.append(hintElement);\r\n                        }\r\n                        /*\r\n                            На каждый элемент подсказок вешаем событие клика.\r\n                        */\r\n                        let childrens = blockHints.children;\r\n                        for (let i = 0; i < childrens.length; i++) {\r\n                            childrens[i].addEventListener('click', function (e) {\r\n                                if (searchContent == \"region\") {\r\n                                    input.value = res[i + 1]['name'] + \" \" + res[i + 1]['type'].toLowerCase();\r\n                                    valueRegion = res[i + 1];\r\n                                    inputLocality.value = '';\r\n                                    cleanHints(blockHints);\r\n                                    cleanHints(blockHintsLocality);\r\n                                    if (select_cell == ('.form__cell_from')) {\r\n                                        seleect_obj.fromRegion = valueRegion;\r\n                                    } else if (select_cell == ('.form__cell_where')) {\r\n                                        seleect_obj.whereRegion = valueRegion;\r\n                                    }\r\n                                } else if (searchContent == \"city\") {\r\n                                    input.value = res[i + 1]['typeShort'].toLowerCase() + \". \" + res[i + 1]['name'];\r\n                                    valueLocality = res[i + 1];\r\n                                    cleanHints(blockHints);\r\n                                    if (select_cell == ('.form__cell_from')) {\r\n                                        seleect_obj.fromLocality = valueLocality;\r\n                                    } else if (select_cell == ('.form__cell_where')) {\r\n                                        seleect_obj.whereLocality = valueLocality;\r\n                                    }\r\n                                }\r\n                                console.log(seleect_obj);\r\n                            })\r\n                        }\r\n                    }\r\n                };\r\n                ajax.send(getParams);\r\n            } else {\r\n                cleanHints(blockHints);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/modules/calculator/processing_route_fields.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/calculator.js");
/******/ 	
/******/ })()
;