/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nlet formDataCalculator = new FormData();\n\nfunction processingRouteFields(selectCell) {\n    let cell = document.querySelector(selectCell);\n    let innerRegion = cell.querySelector('.form__inner_region'),\n        inputRegion = innerRegion.querySelector('.form__input'),\n        blockHintsRegion = innerRegion.querySelector('.form__hints');\n    let innerLocality = cell.querySelector('.form__inner_locality'),\n        inputLocality = innerLocality.querySelector('.form__input'),\n        blockHintsLocality = innerLocality.querySelector('.form__hints');\n\n    let valueRegion = {};\n    let valueLocality = {};\n\n    outputHints(inputRegion, blockHintsRegion, \"region\", 10);\n    outputHints(inputLocality, blockHintsLocality, \"city\", 20);\n    /* \n        Функция вывода подсказок при вводе текста.\n        Принимает в параметрах:\n            - поле ввода текста\n            - блок для вывода подсказок\n            - что ищем (регион или населнный пункт)\n    */\n    function outputHints(input, blockHints, searchContent, answerLimit) {\n        /*\n            Функция открывающая поле региона при клике на ссылку \"Указать регион\" и скрывающая ссылку.\n        */\n        (function () {\n            let link = innerRegion.querySelector('.form__link');\n            link.addEventListener('click', (e) => {\n                inputRegion.classList.remove('display_off');\n                link.classList.add('display_off');\n                inputRegion.focus();\n            });\n        }());\n        /*\n            Функция отслеживает фокус на поле ввода.\n            Если фокус исчезает, подсказки скрываются.\n            Если фокус устанавливается, подсказки появляются.\n        */\n            (function () {\n                input.addEventListener('focus', (e) => {\n                    blockHints.classList.remove('display_off');\n                });\n                input.addEventListener('blur', (e) => {\n                    blockHints.classList.add('display_off');\n                });\n                input.parentElement.tabIndex = 0;\n                input.parentElement.addEventListener('focus', (e) => {\n                    input.focus(); \n                });\n            }());\n\n        /*\n            Функция для удаления подсказок.\n            В качестве параметра принимает блок с подсказками.\n        */\n        function cleanHints(select) {\n            let hints = select.querySelectorAll('.form__hints-element');\n            if (hints.length > 0) {\n                for (let i = 0; i < hints.length; i++) {\n                    hints[i].remove();\n                }\n            };\n        }\n\n        /*\n            Отслеживаем событие ввода текста и обрабатываем его.\n            1. Удаляем все старые подсказки\n            2. Если введено 3 и более символов, формируем запрос на сервер и отправляем его.\n            3. При получении ответа, создаем новые подсказки и выводим их.\n        */\n        input.addEventListener('input', function(e) {\n            cleanHints(blockHints);\n\n            if (input.value.length > 2) {\n                // Собираем объект с данными для запроса и из собранных данных формируем строку с get параметрами запроса.\n                let objectQuery = {};\n                objectQuery = {\n                    query: input.value,\n                    contentType: searchContent,\n                    withParent: 1,\n                    limit: answerLimit\n                };\n                if (searchContent == \"city\" && valueRegion.id != null) {\n                    objectQuery.regionId = +valueRegion.id;\n                }\n                let getParams = '';\n                for (let key in objectQuery) {\n                    if (getParams === '') {\n                        getParams = `${key}=${objectQuery[key]}`;\n                    } else {\n                        getParams += `&${key}=${objectQuery[key]}`;\n                    }\n                }\n\n                let ajax = new XMLHttpRequest();\n                let url = 'http://logist-master/api/hints?' + getParams;\n                ajax.open('get', url, false);\n                ajax.addEventListener('readystatechange', function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        let res = JSON.parse(this.responseText)['result'];\n                        for (let i = 1; i < res.length; i++) {\n                            let hintElement = document.createElement('div');\n                            hintElement.classList.add('form__hints-element');\n\n                            if (searchContent == \"region\") {\n                                let hintRegion = document.createElement('div');\n                                hintRegion.classList.add('form__hints-region');\n                                hintRegion.innerText = res[i]['name'] + \" \" + res[i]['type'].toLowerCase();\n                                hintElement.append(hintRegion);\n                            } else if (searchContent == \"city\") {\n                                let hintCity = document.createElement('div');\n                                hintCity.classList.add('form__hints-city');\n                                hintCity.innerText = res[i]['typeShort'] + \". \" + res[i]['name'] + \" (\" + res[i]['zip'] + \")\";\n                                hintElement.append(hintCity);\n                                let hintRegion = document.createElement('div');\n                                hintRegion.classList.add('form__hints-region');\n                                hintRegion.innerText = res[i]['parents'][0]['name'] + \" \" + res[i]['parents'][0]['typeShort'].toLowerCase();\n                                if (res[i]['parents'].length > 1) {\n                                    hintRegion.innerText += \", \" + res[i]['parents'][1]['name'] + \" \" + res[i]['parents'][1]['typeShort'].toLowerCase() + '.';\n                                }\n                                hintElement.append(hintRegion);\n                            }  \n                            blockHints.append(hintElement);\n                        }\n                        /*\n                            На каждый элемент подсказок вешаем событие клика.\n                        */\n                        let childrens = blockHints.children;\n                        for (let i = 0; i < childrens.length; i++) {\n                            childrens[i].addEventListener('click', function (e) {\n                                if (searchContent == \"region\") {\n                                    input.value = res[i + 1]['name'] + \" \" + res[i + 1]['type'].toLowerCase();\n                                    valueRegion = res[i + 1];\n                                    inputLocality.value = '';\n                                    cleanHints(blockHints);\n                                } else if (searchContent == \"city\") {\n                                    input.value = res[i + 1]['typeShort'].toLowerCase() + \". \" + res[i + 1]['name'];\n                                    cleanHints(blockHints);\n                                    valueLocality = res[i + 1];\n                                }\n                            })\n                        }\n                    }\n                });\n                ajax.send();\n            }\n        });\n    }\n}\nprocessingRouteFields('.form__cell_from');\nprocessingRouteFields('.form__cell_where');\n\n\n\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;